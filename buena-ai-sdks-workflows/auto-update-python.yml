name: üêç Auto-Update Python SDK

on:
  push:
    paths:
      - "python/**"
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel tomli requests

      - name: Check if version exists on PyPI
        id: version_check
        working-directory: ./python
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version already exists on PyPI
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/buena-sdk/$CURRENT_VERSION/json")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "Version $CURRENT_VERSION already exists on PyPI"
            
            # Get the latest version from PyPI
            LATEST_PYPI_VERSION=$(python -c "
          import requests
          try:
              response = requests.get('https://pypi.org/pypi/buena-sdk/json')
              if response.status_code == 200:
                  print(response.json()['info']['version'])
              else:
                  print('$CURRENT_VERSION')
          except:
              print('$CURRENT_VERSION')
          ")
            echo "Latest PyPI version: $LATEST_PYPI_VERSION"
            
            # Increment version
            IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_PYPI_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            
            echo "Bumping to new version: $NEW_VERSION"
            # Update version in pyproject.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
            
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION is available for publishing"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Install package dependencies
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: ./python
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -e .

      - name: Run tests
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: ./python
        run: |
          if [ -d "tests" ] || [ -d "test" ]; then
            python -m pytest tests/ test/ || echo "Tests failed but continuing..."
          else
            echo "No tests found, skipping..."
          fi

      - name: Build package
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: ./python
        run: |
          python -m build
          ls -la dist/

      - name: Publish to PyPI
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: ./python
        run: |
          echo "Publishing version ${{ steps.version_check.outputs.new_version }}"
          python -m twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Commit version bump
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add python/pyproject.toml
          git commit -m "ü§ñ Auto-bump Python SDK to v${{ steps.version_check.outputs.new_version }}" || exit 0
          git push

      - name: Create GitHub Release
        if: steps.version_check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: python-v${{ steps.version_check.outputs.new_version }}
          release_name: Python SDK v${{ steps.version_check.outputs.new_version }}
          body: |
            üêç **Python SDK Auto-Release**
            
            Install with:
            ```bash
            pip install buena-sdk==${{ steps.version_check.outputs.new_version }}
            ```
            
            Changes detected in `/python/` directory.
          draft: false
          prerelease: false