name: ðŸŸ¢ Auto-Update Go SDK

on:
  push:
    paths:
      - "go/**"
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Fix placeholder imports
        working-directory: ./go
        run: |
          # Replace all instances of GIT_USER_ID/GIT_REPO_ID with the correct module path
          find . -type f -name "*.go" -exec sed -i 's|github.com/GIT_USER_ID/GIT_REPO_ID|github.com/buena-ai/sdks/go|g' {} +
          
          # Also fix go.mod if it contains placeholders
          if [ -f "go.mod" ]; then
            sed -i 's|module github.com/GIT_USER_ID/GIT_REPO_ID|module github.com/buena-ai/sdks/go|g' go.mod
          fi

      - name: Initialize go.mod if missing
        working-directory: ./go
        run: |
          if [ ! -f "go.mod" ]; then
            go mod init github.com/buena-ai/sdks/go
          fi

      - name: Validate Go module
        working-directory: ./go
        run: |
          go mod tidy
          go mod verify
          go vet ./...

      - name: Run tests
        working-directory: ./go
        run: |
          if find . -name "*_test.go" | grep -q .; then
            go test ./...
          else
            echo "No tests found, skipping..."
          fi

      - name: Get latest tag and bump version
        id: version
        run: |
          # Get the latest tag for Go SDK
          LATEST_TAG=$(git tag -l "go-v*" | sort -V | tail -1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="go-v0.0.0"
          fi
          echo "Latest Go tag: $LATEST_TAG"

          # Extract version numbers
          VERSION=${LATEST_TAG#go-v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="go-v${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          NEW_TAG="${{ steps.version.outputs.new_tag }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $NEW_TAG -m "ðŸ¤– Auto-release Go SDK $NEW_TAG"
          git push origin $NEW_TAG
          echo "âœ… Published Go SDK $NEW_TAG"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Go SDK ${{ steps.version.outputs.new_tag }}
          body: |
            ðŸŸ¢ **Go SDK Auto-Release**

            Install with:
            ```bash
            go get github.com/buena-ai/sdks/go@${{ steps.version.outputs.new_tag }}
            ```

            Changes detected in `/go/` directory.
          draft: false
          prerelease: false