name: üêç Auto-Update Python SDK

on:
  push:
    paths:
      - "python/**"
    branches: [main]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel tomli

      - name: Auto-bump version
        working-directory: ./python
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version: $CURRENT_VERSION"

          # Split version and increment patch
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New version: $NEW_VERSION"

          # Update version in pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install package dependencies
        working-directory: ./python
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -e .

      - name: Run tests
        working-directory: ./python
        run: |
          if [ -d "tests" ] || [ -d "test" ]; then
            python -m pytest tests/ test/ || echo "Tests failed but continuing..."
          else
            echo "No tests found, skipping..."
          fi

      - name: Build package
        working-directory: ./python
        run: |
          python -m build
          ls -la dist/

      - name: Publish to PyPI
        working-directory: ./python
        run: |
          python -m twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add python/pyproject.toml
          git commit -m "ü§ñ Auto-bump Python SDK to v${{ env.NEW_VERSION }}" || exit 0
          git push

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: python-v${{ env.NEW_VERSION }}
          release_name: Python SDK v${{ env.NEW_VERSION }}
          body: |
            üêç **Python SDK Auto-Release**

            Install with:
            ```bash
            pip install buena-sdk==${{ env.NEW_VERSION }}
            ```

            Changes detected in `/python/` directory.
          draft: false
          prerelease: false
