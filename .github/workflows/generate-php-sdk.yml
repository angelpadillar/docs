name: 🐘 Generate PHP SDK from OpenAPI

on:
  repository_dispatch:
    types: [openapi-updated]
  workflow_dispatch:
    inputs:
      openapi_url:
        description: "OpenAPI specification URL"
        required: false
        default: "https://raw.githubusercontent.com/angelpadillar/docs/main/api-reference/openapi.json"

permissions:
  contents: write
  packages: write

jobs:
  generate-php-sdk:
    runs-on: ubuntu-latest
    name: Regenerate PHP SDK from OpenAPI spec

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mbstring, xml, ctype, json, tokenizer
          tools: composer

      - name: Install OpenAPI Generator
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Download OpenAPI spec
        run: |
          OPENAPI_URL="${{ github.event.client_payload.openapi_url || inputs.openapi_url || 'https://raw.githubusercontent.com/angelpadillar/docs/main/api-reference/openapi.json' }}"
          echo "Downloading OpenAPI spec from: $OPENAPI_URL"
          curl -o openapi.json "$OPENAPI_URL"

          # Validate the OpenAPI spec
          echo "Validating OpenAPI specification..."
          cat openapi.json | jq . > /dev/null || (echo "❌ Invalid JSON in OpenAPI spec" && exit 1)

      - name: Backup existing files
        run: |
          # Preserve important files that shouldn't be overwritten
          mkdir -p backup
          [ -f composer.json ] && cp composer.json backup/ || true
          [ -f README.md ] && cp README.md backup/ || true
          [ -f LICENSE ] && cp LICENSE backup/ || true
          [ -f .gitignore ] && cp .gitignore backup/ || true

      - name: Generate PHP SDK
        run: |
          echo "🐘 Generating PHP SDK..."
          openapi-generator-cli generate \
            -i openapi.json \
            -g php \
            -o . \
            --additional-properties=packageName=BuenaSDK,composerVendorName=buena,composerProjectName=buena-php-sdk,artifactVersion=1.0.0,composerPackageName=buena/buena-php-sdk

      - name: Restore important files
        run: |
          # Restore files that shouldn't be overwritten
          [ -f backup/composer.json ] && cp backup/composer.json . || true
          [ -f backup/README.md ] && cp backup/README.md . || true
          [ -f backup/LICENSE ] && cp backup/LICENSE . || true
          [ -f backup/.gitignore ] && cp backup/.gitignore . || true
          rm -rf backup

      - name: Validate composer.json
        run: |
          if [ -f composer.json ]; then
            composer validate --no-check-all --no-check-publish
            echo "✅ composer.json is valid"
          else
            echo "❌ composer.json not found"
            exit 1
          fi

      - name: Install dependencies and run tests
        run: |
          if [ -f composer.json ]; then
            composer install --no-dev --optimize-autoloader
            
            # Run tests if they exist
            if [ -d "test" ] || [ -d "tests" ]; then
              composer install # Install dev dependencies for testing
              vendor/bin/phpunit test/ tests/ || echo "Tests failed but continuing..."
            else
              echo "No tests found, skipping..."
            fi
          fi

      - name: Clean up
        run: |
          rm -f openapi.json

      - name: Check for changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📝 Changes detected in generated PHP SDK"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes in generated PHP SDK"
          fi

      - name: Get current version and bump
        if: steps.changes.outputs.changes == 'true'
        id: version
        run: |
          # Get current version from composer.json
          if [ -f composer.json ]; then
            CURRENT_VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'))->version ?? '0.0.0';")
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: $CURRENT_VERSION"

          # Increment patch version
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update version in composer.json
          if [ -f composer.json ]; then
            php -r "
            \$json = json_decode(file_get_contents('composer.json'), true);
            \$json['version'] = '$NEW_VERSION';
            file_put_contents('composer.json', json_encode(\$json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            "
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add .
          git commit -m "🤖 Regenerate PHP SDK from OpenAPI spec

          Version: ${{ steps.version.outputs.new_version }}
          Source: ${{ github.event.client_payload.source || 'manual trigger' }}
          Commit: ${{ github.event.client_payload.commit || 'N/A' }}"

          git push

      - name: Create GitHub Release
        if: steps.changes.outputs.changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: PHP SDK v${{ steps.version.outputs.new_version }}
          body: |
            🐘 **PHP SDK Auto-Release**

            Install with Composer:
            ```bash
            composer require buena/buena-php-sdk:^${{ steps.version.outputs.new_version }}
            ```

            This release was automatically generated from the latest OpenAPI specification.
          draft: false
          prerelease: false

      - name: Summary
        run: |
          echo "## 🐘 PHP SDK Generation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.changes.outputs.changes }}" == "true" ]]; then
            echo "✅ PHP SDK regenerated and published as v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 Install: \`composer require buena/buena-php-sdk:^${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes detected - PHP SDK is up to date" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** ${{ github.event.client_payload.source || 'Manual trigger' }}" >> $GITHUB_STEP_SUMMARY
