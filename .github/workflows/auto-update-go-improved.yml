name: 🟢 Auto-Update Go SDK (Improved)

on:
  push:
    paths:
      - "go/**"
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper tagging

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Fix any remaining placeholder issues
        working-directory: ./go
        run: |
          echo "🔧 Fixing any OpenAPI generator placeholder issues..."
          # Fix any remaining GIT_USER_ID/GIT_REPO_ID placeholders
          find . -type f -name "*.go" -exec sed -i 's|github.com/GIT_USER_ID/GIT_REPO_ID|github.com/Buena-AI/sdks/go|g' {} \;
          # Fix any other common placeholder issues
          find . -type f -name "*.go" -exec sed -i 's|{{packageName}}|buena|g' {} \;
          find . -type f -name "*.go" -exec sed -i 's|{{moduleName}}|github.com/Buena-AI/sdks/go|g' {} \;

      - name: Validate Go module
        working-directory: ./go
        run: |
          # Initialize go.mod if it doesn't exist or is broken
          if [ ! -f go.mod ] || ! go mod tidy; then
            echo "Initializing go.mod..."
            rm -f go.mod go.sum
            go mod init github.com/Buena-AI/sdks/go
            go mod tidy
          else
            go mod verify
          fi
          go vet ./... || echo "Go vet found issues but continuing..."

      - name: Run tests
        working-directory: ./go
        run: |
          if find . -name "*_test.go" | grep -q .; then
            go test ./... || echo "Tests failed but continuing..."
          else
            echo "No tests found, skipping..."
          fi

      - name: Check if tag should be created
        id: version_check
        run: |
          # Get the latest tag for Go SDK
          LATEST_TAG=$(git tag -l "go-v*" | sort -V | tail -1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="go-v0.0.0"
          fi
          echo "Latest Go tag: $LATEST_TAG"

          # Extract version numbers
          VERSION=${LATEST_TAG#go-v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="go-v${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "should_publish=true" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          NEW_TAG="${{ steps.version_check.outputs.new_tag }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit any fixes we made
          git add go/
          git commit -m "🤖 Fix Go SDK placeholders and prepare $NEW_TAG" || echo "No changes to commit"

          # Create and push tag
          git tag -a $NEW_TAG -m "🤖 Auto-release Go SDK $NEW_TAG"
          git push origin $NEW_TAG
          git push origin main || echo "No main branch changes to push"
          echo "✅ Published Go SDK $NEW_TAG"

      - name: Create GitHub Release
        if: steps.version_check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_check.outputs.new_tag }}
          release_name: Go SDK ${{ steps.version_check.outputs.new_tag }}
          body: |
            🟢 **Go SDK Auto-Release**

            Install with:
            ```bash
            go get github.com/Buena-AI/sdks/go@${{ steps.version_check.outputs.new_tag }}
            ```

            Changes detected in `/go/` directory.

            **Note**: This release includes fixes for any OpenAPI generator placeholder issues.
          draft: false
          prerelease: false

      - name: Summary
        run: |
          echo "## 🟢 Go SDK Update" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.version_check.outputs.should_publish }}" == "true" ]]; then
            echo "✅ Published version ${{ steps.version_check.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 Install: \`go get github.com/Buena-AI/sdks/go@${{ steps.version_check.outputs.new_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Fixed any OpenAPI generator placeholder issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes requiring publication" >> $GITHUB_STEP_SUMMARY
          fi
